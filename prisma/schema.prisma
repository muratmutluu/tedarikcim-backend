generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINUSER
  CUSTOMERUSER
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username     String  @unique
  password     String
  role         Role    @default(CUSTOMERUSER)
  refreshToken String?

  customerId Int?      @unique
  customer   Customer? @relation(fields: [customerId], references: [id])
}

model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  address   String?
  phone     String?
  email     String?
  taxOffice String?
  taxNumber String?

  transactions CustomerTransaction[]
  invoices     Invoice[]

  user User?
}

enum CustomerTransactionType {
  SALE
  PAYMENT
}

model CustomerTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionType CustomerTransactionType
  transactionDate DateTime
  description     String
  quantity        Float?
  quantityUnit    String?
  unitPrice       Float?
  totalAmount     Float?
  receivedAmount  Float?

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "fk_customer_transactions")
}

model Supplier {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  address   String?
  phone     String?
  email     String?
  taxOffice String?
  taxNumber String?

  transactions SupplierTransaction[]
}

enum SupplierTransactionType {
  PURCHASE
  PAYMENT
}

model SupplierTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionType SupplierTransactionType
  transactionDate DateTime
  description     String
  quantity        Float?
  quantityUnit    String?
  unitPrice       Float?
  totalAmount     Float?
  paidAmount      Float?

  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade, map: "fk_supplier_transactions")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoiceDate    DateTime
  invoiceNumber  String
  description    String
  subTotalAmount Float
  taxRate        Float
  taxAmount      Float
  totalAmount    Float

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "fk_customer_invoices")

  invoiceItems InvoiceItem[]
}

model InvoiceItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  quantity    Float
  unitPrice   Float
  totalAmount Float

  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, map: "fk_invoice_items")
}
